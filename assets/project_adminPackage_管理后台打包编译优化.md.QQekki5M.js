import{_ as i,c as a,R as e,o as n}from"./chunks/framework.D03bak1J.js";const c=JSON.parse('{"title":"打包构建","description":"","frontmatter":{},"headers":[],"relativePath":"project/adminPackage/管理后台打包编译优化.md","filePath":"project/adminPackage/管理后台打包编译优化.md"}'),l={name:"project/adminPackage/管理后台打包编译优化.md"};function t(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="打包构建" tabindex="-1">打包构建 <a class="header-anchor" href="#打包构建" aria-label="Permalink to &quot;打包构建&quot;">​</a></h1><h2 id="直接打包" tabindex="-1">直接打包 <a class="header-anchor" href="#直接打包" aria-label="Permalink to &quot;直接打包&quot;">​</a></h2><p>General output time took 6 mins, 19.62 secs dist包38M</p><h2 id="静态资源优化" tabindex="-1">静态资源优化 <a class="header-anchor" href="#静态资源优化" aria-label="Permalink to &quot;静态资源优化&quot;">​</a></h2><ol><li>excel文件上传模板,静态图片上传cdn,减少了12M体积</li><li>无用的业务代码文件路由不引入,减少了差不多接近500kb体积(认知途径,认筹认购签约模块只保留数据查询)</li><li>地图里有个62k的中国geojson文件,放到cdn</li><li>不能再使用$api把所有api接口放在同一个对象了,体积太大,改为在功能里新建service文件定义api</li></ol><h2 id="优化老旧依赖" tabindex="-1">优化老旧依赖 <a class="header-anchor" href="#优化老旧依赖" aria-label="Permalink to &quot;优化老旧依赖&quot;">​</a></h2><ol><li>vue-jsonp,vue-xlsx-table,sortable删除(重复功能依赖)</li><li>antDesignVue和elementUi改为按需引入,elementUi当时是为了引入DatePicker的组件使用</li></ol><h2 id="为什么要在对每个功能模块的路由使用懒加载组件时要指定webpackchunkname" tabindex="-1">为什么要在对每个功能模块的路由使用懒加载组件时要指定webpackChunkName <a class="header-anchor" href="#为什么要在对每个功能模块的路由使用懒加载组件时要指定webpackchunkname" aria-label="Permalink to &quot;为什么要在对每个功能模块的路由使用懒加载组件时要指定webpackChunkName&quot;">​</a></h2><ol><li>把多个业务模块的组件统一打包成一个chunk,减少http请求</li><li>vue-cli默认会对 import() 异步加载的代码块使用@vue/preload-webpack-plugin插件把相关chunk的css和js文件进行link rel=prefetch处理,升级到webpack5后没了</li></ol><p>经过上面处理后通过代码包dist变为26M,开启gzip后通过分析所有的chunk文件总和只有3M,没有白屏加载过长问题,首次打开fcp也在1秒多一点 目前就是打包和编译时间太长,6分多钟</p><h2 id="内置了node-modules的-cache缓存" tabindex="-1">内置了node_modules的.cache缓存 <a class="header-anchor" href="#内置了node-modules的-cache缓存" aria-label="Permalink to &quot;内置了node_modules的.cache缓存&quot;">​</a></h2><p>里面有babel-loader,vue-loader,ts-loader,terser-webpack-plugin的缓存</p><h2 id="使用dll动态链接库" tabindex="-1">使用dll动态链接库 <a class="header-anchor" href="#使用dll动态链接库" aria-label="Permalink to &quot;使用dll动态链接库&quot;">​</a></h2><p>对vue,vuex,vue-router,axios,echarts,xlsx,vue-xlsx-table,@antv/g2,moment进行dll缓存,moment是ant-design-vue内置的,默认打包所有语言包,通过ContextReplacementPlugin插件只打包中文 其中打包时分析DllReferencePlugin 花费 8.98 secs</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dllPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./public/vendor&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parallel: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vendor: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue/dist/vue.runtime.esm.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vuex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue-router&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;echarts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue-xlsx-table&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@antv/g2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name].dll.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, dllPath),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    library: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]_[hash]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CleanWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@see</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://github.com/jmblog/how-to-optimize-momentjs-with-webpack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * load \`moment/locale/zh-cn.js\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextReplacementPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">moment</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">locale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">zh-cn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DllPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name]_[hash]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, dllPath, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[name].manifest.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      context: process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isEnvProduction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DllReferencePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context: __dirname,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manifest: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./public/vendor/vendor.manifest.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span></code></pre></div><p>General output time took 4 mins, 57.67 secs 效果比较显著,减少了1分20多秒</p><p>dll动态链接库在webpack4中过时了,vue-cli也不推荐使用,推荐使用hard-source-webpack-plugin</p><h2 id="使用hardsourcewebpackplugin-放弃" tabindex="-1">使用HardSourceWebpackPlugin(放弃) <a class="header-anchor" href="#使用hardsourcewebpackplugin-放弃" aria-label="Permalink to &quot;使用HardSourceWebpackPlugin(放弃)&quot;">​</a></h2><p>对打包整个过程的产物进行缓存,第一次打包花费了HardSourceWebpackPlugin took 49 mins, 56.21 secs,缓存了787M的文件 后续打包时间没变化</p><h2 id="升级到vue-cli-5-使用webpack5" tabindex="-1">升级到vue-cli@5,使用webpack5 <a class="header-anchor" href="#升级到vue-cli-5-使用webpack5" aria-label="Permalink to &quot;升级到vue-cli@5,使用webpack5&quot;">​</a></h2><ol><li>@vue/cli相关依赖插件升级到5.0.8,eslint升级到7,eslint-plugin-vue升级到8</li><li>unplugin-vue2-script-setup/webpack插件要改为require(&#39;unplugin-vue2-script-setup/webpack&#39;).default 多了个default</li><li>IgnorePlugin改为传入对象{resourceRegExp: /.md$/}</li><li>移除了dll动态链接库,直接使用webpack5的cache缓存</li><li><a href="https://juejin.cn/post/7218510156267520060#heading-21" target="_blank" rel="noreferrer">@vue/cli 5.x的配置实战与优化</a></li></ol><h2 id="使用swc-loader替换babel-loader" tabindex="-1">使用swc-loader替换babel-loader <a class="header-anchor" href="#使用swc-loader替换babel-loader" aria-label="Permalink to &quot;使用swc-loader替换babel-loader&quot;">​</a></h2><ol><li>去除rule中js和ts的babel-loader规则,重新直接改用swc-loader</li><li>配置.swcrc文件,swc-loader默认会读取项目根目录下的这个文件,ts要在loader里单独配置下{ jsc: { parser: { syntax: &#39;typescript&#39;, tsx: true, decorators: true, // 装饰器 }, transform: { decoratorMetadata: true, // 装饰器 legacyDecorator: true, // 装饰器 }, }, }</li><li>使用swc-plugin-another-transform-imports插件替换babel-import-plugin</li><li>swc-loader的配置内部默认是react,把vue里的h方法默认替换成了react.createElement,通过配置修改为pragma为h但不生效</li><li>.vue中的jsx处理暂时没有找到替代方案,vue3有个swc-plugin-vue-jsx可以处理</li></ol><table><thead><tr><th style="text-align:center;">项目</th><th style="text-align:center;">时间</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">babel + 首次</td><td style="text-align:center;">114s</td><td style="text-align:center;">.cache里有babel</td></tr><tr><td style="text-align:center;">babel + 第二次</td><td style="text-align:center;">80s</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">babel + 配置cache 首次</td><td style="text-align:center;">96s</td><td style="text-align:center;">.cache里有babel和webpack default-prod的.pack文件</td></tr><tr><td style="text-align:center;">babel + 配置cache 第二次</td><td style="text-align:center;">8~9s</td><td style="text-align:center;">无敌了, 修改App.vue的内容后打包变为11s</td></tr><tr><td style="text-align:center;">swc + 首次</td><td style="text-align:center;">71s</td><td style="text-align:center;">快了40s</td></tr><tr><td style="text-align:center;">swc + 第二次</td><td style="text-align:center;">70s</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">swc + 配置cache 首次</td><td style="text-align:center;">67s</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">swc + 配置cache 第二次</td><td style="text-align:center;">8s</td><td style="text-align:center;">.cache里webpack default-prod的.pack文件</td></tr></tbody></table><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>从一开始6分20秒到最后开启webpack5缓存只需8秒,即使每次发版更改文件,也在30多秒完成了,同时使用缓存后swc和babel的差距不大</p><h1 id="编译优化" tabindex="-1">编译优化 <a class="header-anchor" href="#编译优化" aria-label="Permalink to &quot;编译优化&quot;">​</a></h1><h2 id="升级后进行dev编译" tabindex="-1">升级后进行dev编译 <a class="header-anchor" href="#升级后进行dev编译" aria-label="Permalink to &quot;升级后进行dev编译&quot;">​</a></h2><p>Compiled successfully in 150507ms 2分多钟</p><h2 id="swc-cache-编译" tabindex="-1">swc + cache 编译 <a class="header-anchor" href="#swc-cache-编译" aria-label="Permalink to &quot;swc + cache 编译&quot;">​</a></h2><p>首次70s,后续13秒</p><h2 id="dev时选择模块编译" tabindex="-1">dev时选择模块编译 <a class="header-anchor" href="#dev时选择模块编译" aria-label="Permalink to &quot;dev时选择模块编译&quot;">​</a></h2><ol><li>先执行脚本对view中的模块文件名读取成数组再使用const { prompt } = require(&#39;enquirer&#39;)进行选择</li><li>选择对应模块后重写router/routes文件,在export default [] 中只引用选择的模块</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;customerManage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;customerMap&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;dataOverview&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;dataOverviewMorePlatform&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> selectCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`...\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routesCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import a from &#39;./a&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import b from &#39;./b&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import c from &#39;./c&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">export default [\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div><ol start="3"><li>接口获取菜单执行动态添加路由时就通过这里导出的路由数组来添加</li><li>从而在编译时引入比较少的模块实现更快的编译</li></ol>`,35)]))}const o=i(l,[["render",t]]);export{c as __pageData,o as default};
