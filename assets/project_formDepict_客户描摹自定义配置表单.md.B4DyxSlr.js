import{_ as s,c as a,R as t,o as l}from"./chunks/framework.D03bak1J.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"project/formDepict/客户描摹自定义配置表单.md","filePath":"project/formDepict/客户描摹自定义配置表单.md"}'),n={name:"project/formDepict/客户描摹自定义配置表单.md"};function h(p,i,k,e,E,r){return l(),a("div",null,i[0]||(i[0]=[t(`<h2 id="功能详细" tabindex="-1">功能详细 <a class="header-anchor" href="#功能详细" aria-label="Permalink to &quot;功能详细&quot;">​</a></h2><ol><li>管理后台中对每个项目设置一个顾问和自渠身份的描摹,支持一键复制配置到其他项目</li><li>通过左侧默认字段库和自定义字段库选择字段,支持单多数字文本,日期,单多选,级联选,详细地址,上传图片,中间展示字段内容,并且vue-draggable进行排序</li><li>支持手动缓存记录和确认保存自动缓存,缓存按时间顺序存在数组,用index指针表示当前,可以选择上一个,下一个,也可以看到缓存列表详情(可以备注改名),一键复用之前配置</li><li>单选多选有一些是通过别的功能字段配置而来的,这些特殊字段的选项值后端返回的时候会查询带上</li><li>在state.ts中使用了一个commonState的reactive进行总体的数据管理</li><li>initNodeData 初始化或更新节点数据,基本对节点操作后都要调用,重新计算当前各个状态tab的可见字段数以及当前激活字段的fieldList</li></ol><h2 id="小程序端" tabindex="-1">小程序端 <a class="header-anchor" href="#小程序端" aria-label="Permalink to &quot;小程序端&quot;">​</a></h2><ol><li>一开始开发图快捷,是组件里深拷贝数据后直接绑定到视图上,然后通过watch-deep方式一旦改变就整个emit出去,外部直接整个配置替换</li><li>后面上线后发现性能太差,一些项目有考核要求,一次要填4 50个必填字段,这种监听整个配置,又整个配置替换又传进去重新渲染会非常卡</li><li>想改成直接传配置项进去绑定视图,这样vmodel直接修改,相当于改props字段了,在uniapp编译的小程序中,这种操作实际上也不生效</li><li>因此改成在保存的时候再统一emit出去,拿到配置项后再做一些校验操作,体感上从点击一下选项卡顿2秒左右到跟手</li><li>uniapp的文本框在ios上有坑,快速输入时会出现值抖动,原因是输入很快回显,但是真实双向绑定改变赋值会慢点,例如快速输入12345,最终会12345出现然后被123覆盖了,最后发现v-model,和:value @input @change都不行,只能通过$blur的时候赋值</li><li>下面这种form-depict里面这种写法,可以在组件里面只收集了form.name的依赖,此时在组件内部修改form.name不会触发form-depict重新渲染,因此callback不会重新执行</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- form-depict --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">callback () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.log(123)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ callback() }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- x-input --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form[name]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><ol start="7"><li>简单重写一些表单项,去除多余无用的props依赖属性,减少组件的响应式属性,从而减少一些watcher和dep,例如u-input里的一些样式属性,光标位置,高度,对齐方式之类的</li><li>input框之类的输入改为v-model.lazy,减少多次更新</li></ol>`,6)]))}const g=s(n,[["render",h]]);export{o as __pageData,g as default};
