import{_ as i,c as a,R as n,o as l}from"./chunks/framework.D03bak1J.js";const o=JSON.parse('{"title":"filter组件设计","description":"","frontmatter":{},"headers":[],"relativePath":"project/adminFilterTableHook/封装sw-filter和hook钩子.md","filePath":"project/adminFilterTableHook/封装sw-filter和hook钩子.md"}'),h={name:"project/adminFilterTableHook/封装sw-filter和hook钩子.md"};function t(e,s,p,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="filter组件设计" tabindex="-1">filter组件设计 <a class="header-anchor" href="#filter组件设计" aria-label="Permalink to &quot;filter组件设计&quot;">​</a></h1><h2 id="props加defaultvalues原因" tabindex="-1">props加defaultValues原因 <a class="header-anchor" href="#props加defaultvalues原因" aria-label="Permalink to &quot;props加defaultValues原因&quot;">​</a></h2><p>加这个的原因是有些默认值可能是异步返回的,通过修改这个之后,后续reset重新取默认值是可以拿到异步返回的值</p><h2 id="默认值和format值设置好后-修改表单数据formstate有变化-但是视图里的值复原成默认值" tabindex="-1">默认值和format值设置好后,修改表单数据formState有变化,但是视图里的值复原成默认值 <a class="header-anchor" href="#默认值和format值设置好后-修改表单数据formstate有变化-但是视图里的值复原成默认值" aria-label="Permalink to &quot;默认值和format值设置好后,修改表单数据formState有变化,但是视图里的值复原成默认值&quot;">​</a></h2><h3 id="原因" tabindex="-1">原因 <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因&quot;">​</a></h3><p>Object.assign(formState, { ...unref(formStateDefault) });</p><p>vue2中实际上还是旧的响应式写法,因此用这种方式会破坏了原来的响应式</p><h3 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决&quot;">​</a></h3><p>formState改为ref定义,支持重新赋值</p><h2 id="筛选项和按钮项根据宽度自动决定占位大小-屏幕宽度改变时重新自动计算" tabindex="-1">筛选项和按钮项根据宽度自动决定占位大小,屏幕宽度改变时重新自动计算 <a class="header-anchor" href="#筛选项和按钮项根据宽度自动决定占位大小-屏幕宽度改变时重新自动计算" aria-label="Permalink to &quot;筛选项和按钮项根据宽度自动决定占位大小,屏幕宽度改变时重新自动计算&quot;">​</a></h2><h3 id="默认筛选栏2行内容展示-超过后显示自动折叠-保证加上actions部分不超过2行" tabindex="-1">默认筛选栏2行内容展示,超过后显示自动折叠,保证加上actions部分不超过2行 <a class="header-anchor" href="#默认筛选栏2行内容展示-超过后显示自动折叠-保证加上actions部分不超过2行" aria-label="Permalink to &quot;默认筛选栏2行内容展示,超过后显示自动折叠,保证加上actions部分不超过2行&quot;">​</a></h3><p>overflowIndex是核心判断,他返回一个index,这个index就是判断出到了哪个字段的时候超过了两行,字段index大于这个overflowIndex的都要隐藏 如果没有超过两行的字段会返回-1,此时代表着不会有展开收起的逻辑</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> overflowIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currentColSpan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.col.span;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> actionColSpan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props.showAction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (props.actionCol?.[state.col.size] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentColSpan) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalGrids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionColSpan;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visibleFields).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    totalGrids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (field.col?.[state.col.size] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentColSpan);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalGrids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRIDS_IN_ROW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THRESHOLD_ROWS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 所有字段总占位数 / 24 得到是否超过限制的2行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h1 id="hook里联动-三种方式调用table接口" tabindex="-1">hook里联动,三种方式调用table接口 <a class="header-anchor" href="#hook里联动-三种方式调用table接口" aria-label="Permalink to &quot;hook里联动,三种方式调用table接口&quot;">​</a></h1><h2 id="filter筛选栏点击查询-重置" tabindex="-1">filter筛选栏点击查询,重置 <a class="header-anchor" href="#filter筛选栏点击查询-重置" aria-label="Permalink to &quot;filter筛选栏点击查询,重置&quot;">​</a></h2><p>通过在hook里生成一个filterOn对象返回出去,在组件中只需要v-on绑定即可</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filterOn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filterParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filterProps.onSearch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterProps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastFilterParams, filterParams)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      refreshTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      jumpPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filterParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filterProps.onReset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterProps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onReset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    refreshTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filterProps.onChange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterProps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filterParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="table列表页页面-排序点击" tabindex="-1">table列表页页面, 排序点击 <a class="header-anchor" href="#table列表页页面-排序点击" aria-label="Permalink to &quot;table列表页页面, 排序点击&quot;">​</a></h2><p>通过在hook里生成一个tableOn对象返回出去,在table组件中只需要v-on绑定即可,</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tableOn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pagination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sorter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tableParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { pagination, filters, sorter }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tableProps.pagination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagination</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tableProps.onChange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tableProps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tableParams)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    refreshTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="手动调用refresh和jump-api" tabindex="-1">手动调用refresh和jump api <a class="header-anchor" href="#手动调用refresh和jump-api" aria-label="Permalink to &quot;手动调用refresh和jump api&quot;">​</a></h2><p>完成了以上两点,这边就可以手动调用了 在setup中直接使用refreshTable或者jumpPage时会拿不到默认值，得onMounted里面拿</p><h2 id="请求取消多次重复请求功能" tabindex="-1">请求取消多次重复请求功能 <a class="header-anchor" href="#请求取消多次重复请求功能" aria-label="Permalink to &quot;请求取消多次重复请求功能&quot;">​</a></h2><ol><li>在useFilterHook中定义一个controller接收每一次的new AbortController();</li><li>在每次接口调用之前判断列表是否在加载中和controller是否有值</li><li>如果在加载中和controller有值,则先调用controller.abort()取消上一次的请求,然后重新new一个controller</li><li>调用传进来的请求方法中把controller.signal传出去给axios请求配置</li></ol><h2 id="当有表单项是异步获取数据然后再设置默认值-如何保证初始化时能带上这个异步默认值参数" tabindex="-1">当有表单项是异步获取数据然后再设置默认值,如何保证初始化时能带上这个异步默认值参数 <a class="header-anchor" href="#当有表单项是异步获取数据然后再设置默认值-如何保证初始化时能带上这个异步默认值参数" aria-label="Permalink to &quot;当有表单项是异步获取数据然后再设置默认值,如何保证初始化时能带上这个异步默认值参数&quot;">​</a></h2><p>当初始化首次调用时 refreshTable 没有点击查询重置获取的filterParams 这里改用从filterProps中重新获取defaultValue和format处理 不用filterRef就不需要强行要等到onMounted里使用</p><p>当有异步筛选项时,就可以通过设置该表单项的onChange或者onInput事件拿到想要出初始值,再去做refreshTable初始化</p>`,27)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
